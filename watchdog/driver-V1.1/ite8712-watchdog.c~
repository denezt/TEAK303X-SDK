/*
 $Id: nsm5010_watchdog.c 2007-02-13 10:56:59 mark Hsieh $

 Linux kernel watchdog interface compatible wachdog driver for Arinfotek NSM5010

  This code is a watchdog device driver used to control the ITE-8712 Super IO as   watchdog timer function.
 The code works in Pentium-M or Celeron-M processor with south bridge ICH6.
 Application uses this driver to reset the timer by invoking the function  in watchdog device to avoid the system reset.

 All rights are reserved.
 Mark Hsieh V1.00  2007/02/13 -- initial version
*/

#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/fs.h>
#include <linux/init.h>
#include <linux/delay.h>
#include <linux/miscdevice.h>
#include <linux/watchdog.h>
#include <linux/pci.h>
#include <linux/pci_ids.h>
#include <asm/io.h>
#include <asm/uaccess.h>
//#include <asm/msr.h>

#define NAME "nsm5010_watchdog"


#define ADDR_PORT	        	0x2E				// Address port
#define DATA_PORT	        	0x2F				// Data port

#define WDC_CTRL_REG		0x71				// Control Register
#define WDC_CFG_REG			0x72				// Configuration Register
#define WDC_TIMEOUT_LSB		0x73				// Timer Time-Out LSB Register
#define WDC_TIMEOUT_MSB		0x74				// Timeer Time-Out MSB Register
#define WDC_EXIT_MODE		0x02				// Global Configure Control

typedef unsigned char byte;


struct nsm5010_watchdog_struct {
	int 		status;			// status
	unsigned long 	opened;	// opened
	u16		timeout_counter;		//
	u16		gamePort_base;		// Game Port Base Address
};


#define LOCAL_VERSTRING 	"nsm5010: 1.00"
static char *watchdog_version = "$Rev: 1.00$";
static char *watchdog_revdate = "$Date: 2007-02-13 10:56:59 +0100 (Tues., 13 Feb. 2007) $";

struct nsm5010_watchdog_struct nsm5010_watchdog_info;

// set the enter key to configuration mode
// entry key= 0x87, 0x01, 0x55, 0x55 for 0x2E
static void watchdog_enterKey(void)
{
	outb(0x87, ADDR_PORT);
	outb(0x01, ADDR_PORT);
	outb(0x55, ADDR_PORT);
	outb(0x55, ADDR_PORT);
}

static void watchdog_setValue(byte reg, byte val)
{
	outb(reg, ADDR_PORT);
	outb(val, DATA_PORT);
}

static unsigned char watchdog_getValue(byte reg)
{
	outb(reg, ADDR_PORT);
   return inb(DATA_PORT);
}

// check game port base address
//  for keeping away from changing the base
#ifdef CHECK_gamePort
static void check_gamePort_base(void)
{
	unsigned char gamePort;
// set enter key
	watchdog_enterKey();
	// Choose logical device for Game Port
	// LDN= 0x09
	watchdog_setValue(0x07, 0x09);
    // Enable Game Port function
	//watchdog_setValue(0x30, 0x01);

	// Get the base address of the game port
	gamePort= watchdog_getValue(0x60);
	nsm5010_watchdog_info.gamePort_base = gamePort;
	gamePort= watchdog_getValue(0x61);
	nsm5010_watchdog_info.gamePort_base <<= 8;
	nsm5010_watchdog_info.gamePort_base |= gamePort;

    // Exit the Configuration Mode for watchdog
    // bit-1
    watchdog_setValue(WDC_EXIT_MODE, 0x02);
}
#endif
// read/write data to game port
static void reset_watchdog(void)
{
	// check the game port base address
	// if consider performance, please remove the following checking.
	// But remember the game port base can not be updated during processing
	// check_gamePort_base();
	// read/write the game port to reset the watchdog timer
	// printk("nsm5010_watchdog: reset timer base=0x%X\n",nsm5010_watchdog_info.gamePort_base);
	outb(0x01, nsm5010_watchdog_info.gamePort_base);
}

static void enable_watchdog_counter(void)
{
	unsigned char set;

	// set enter key
	watchdog_enterKey();

	// Choose logical device for watchdog
	// LDN= 0x07
	watchdog_setValue(0x07, 0x07);

	// watch dog is activated by setting WDT status bit to '0'
	set= watchdog_getValue(WDC_CTRL_REG);
	printk("watchdog: WDC_CTRL_REG=0x%X\n", set);
	watchdog_setValue(WDC_CTRL_REG, ( set & 0xFE));

	set= watchdog_getValue(WDC_CFG_REG);
	// Set Configuration Register to second-enabled
	// bit-7: 1-> second    0->minute
	// bit-6: 1-> enable    0->disable
	// Output through KRST
	// Start watchdog
	set |= 0xC0;
	printk("watchdog: WDC_CFG_REG=0x%X\n", set);
	watchdog_setValue(WDC_CFG_REG, set);

    // Exit the Configuration Mode for watchdog
    // bit-1
    watchdog_setValue(WDC_EXIT_MODE, 0x02);

}

static void disable_watchdog_counter(void)
{
	unsigned char set;

	// set enter key
	watchdog_enterKey();

	// Choose logical device for watchdog
	// LDN= 0x07
	watchdog_setValue(0x07, 0x07);

	set= watchdog_getValue(WDC_CFG_REG);
	// Set Configuration Register to second-enabled
	// bit-7: 1-> second    0->minute
	// bit-6: 1-> enable    0->disable
	// Output through KRST
	// Stop watchdog
	set &= 0xBF;
	watchdog_setValue(WDC_CFG_REG, set);

    // Exit the Configuration Mode for watchdog
    // bit-1
    watchdog_setValue(WDC_EXIT_MODE, 0x02);

}

static void program_watchdog_timer(unsigned short counter)
{
	// set the counter to the specified value in second
	// Set watchdog time-Out value
	// LSB Register
	unsigned char set;

	// set enter key
	watchdog_enterKey();

	// Choose logical device for watchdog
	// LDN= 0x07
	watchdog_setValue(0x07, 0x07);

	set= (unsigned char) (counter & 0xFF);
	watchdog_setValue(WDC_TIMEOUT_LSB, set);

	// MSB Register
	set= (unsigned char) (( counter >> 8) & 0xFF);
	printk("watchdog: timer counter=%X\n", counter);
	watchdog_setValue(WDC_TIMEOUT_MSB, set);

    // Exit the Configuration Mode for watchdog
    // bit-1
    watchdog_setValue(WDC_EXIT_MODE, 0x02);

}
static ssize_t watchdog_write(struct file *filp,const char *buf, size_t count,loff_t *offset)
{
	if (count) {
		reset_watchdog();
	}
	return count;
}

static int watchdog_ioctl(struct inode *inode, struct file *file,
			    unsigned int cmd, unsigned long arg)
{
	unsigned int setCounter=0;

	static struct watchdog_info info = {
		.options = (WDIOF_SETTIMEOUT | WDIOF_KEEPALIVEPING),
		.firmware_version = 0,
		.identity = "NSM5010 watchdog",
	};

	switch (cmd) {
	case WDIOC_GETSUPPORT:
		if (copy_to_user((void *)arg, &info, sizeof(info)))
			return -EFAULT;
		break;

	case WDIOC_GETSTATUS:
	case WDIOC_GETBOOTSTATUS:
		if (put_user(nsm5010_watchdog_info.status, (int *)arg))
			return -EFAULT;
		nsm5010_watchdog_info.status &= ~WDIOF_KEEPALIVEPING;
		//printk("watchdog: status=%X\n", nsm5010_watchdog_info.status);
		break;
	case WDIOC_KEEPALIVE:
		reset_watchdog();
		nsm5010_watchdog_info.status |= WDIOF_KEEPALIVEPING;
		//printk(KERN_DEBUG NAME "watchdog: Keep alive\n");
		//printk("watchdog: Keep alive\n");
		break;
	case WDIOS_ENABLECARD:
		enable_watchdog_counter();
		//printk(KERN_DEBUG NAME "watchdog: enabled\n");
		printk("watchdog: enabled\n");
		break;
	case WDIOS_DISABLECARD:
		disable_watchdog_counter();
		//printk(KERN_DEBUG NAME "watchdog: disabled\n");
		printk("watchdog: disabled\n");
		break;
	case WDIOC_SETTIMEOUT:
		get_user(setCounter, (u16 *)(arg));
		//printk(KERN_DEBUG NAME "watchdog: counter setting=%X\n", setCounter);
		printk("watchdog: counter setting=%X\n", setCounter);
		nsm5010_watchdog_info.timeout_counter = setCounter;
		program_watchdog_timer(setCounter);
		//program_watchdog_timer(setCounter);
		break;
	//case WDIOC_SETTIMEOUT:
	//	return -EOPNOTSUPP;

	case WDIOC_GETTIMEOUT:
		if (put_user(nsm5010_watchdog_info.timeout_counter, (u16 *)arg))
			return -EFAULT;
		break;
	default:
		return -ENOIOCTLCMD;
	}

	return 0;
}

static int watchdog_open(struct inode *inode,  struct file * filp)
{
	unsigned char set;
	unsigned short gamePort;
	//unsigned char id1, id2;

	if (test_and_set_bit(0, &nsm5010_watchdog_info.opened)) return -EBUSY;
	//printk("nsm5010_watchdog: open device entry\n");
	// set enter key
	watchdog_enterKey();

	// Read the ID of ITE-8712
   // id1= watchdog_getValue(0x20);
   // id2= watchdog_getValue(0x21);
	// printk("nsm5010_watchdog: ID1=0x%X  ID2=0x%X\n", id1, id2);

	// Choose logical device for watchdog
	// LDN= 0x07
	watchdog_setValue(0x07, 0x07);

	// Set Control Register of watchdog to reset upon a KBC( mouse, keyboard,gameport) interrupt
	watchdog_setValue(WDC_CTRL_REG, 0x70);

	// Set watchdog time-Out value
	// LSB Register
	// MSB Register
	set= (unsigned char) (nsm5010_watchdog_info.timeout_counter & 0xFF);
	watchdog_setValue(WDC_TIMEOUT_LSB, set);

	// MSB Register
	set= (unsigned char) ((nsm5010_watchdog_info.timeout_counter >> 8) & 0xFF);
	watchdog_setValue(WDC_TIMEOUT_MSB, set);

	// Set Configuration Register to second-enabled
	// Output through KRST
	//  Not Enable the KRST
	set= (unsigned char)watchdog_getValue(WDC_CFG_REG);
	set = 0x80;
	watchdog_setValue(WDC_CFG_REG, set);

 	// Set Configuration Register to minute-enabled
	// Output through KRST
	//  Not enable the KRST
	//watchdog_setValue(WDC_CFG_REG, 0x00);


	// Enable Game port function in multiple-pin
	set= watchdog_getValue(0x2C);
	set &= 0x0F;
	//printk("watchdog: game multi-pin=0x%02X\n", set);
	watchdog_setValue(0x2C, set);


	// Choose logical device for Game Port
	// LDN= 0x09
	watchdog_setValue(0x07, 0x09);

	// Get the base address of the game port
	gamePort= watchdog_getValue(0x60);
	nsm5010_watchdog_info.gamePort_base = gamePort;
	gamePort= watchdog_getValue(0x61);
	nsm5010_watchdog_info.gamePort_base <<= 8;
	nsm5010_watchdog_info.gamePort_base |= gamePort;
	printk("nsm5010_watchdog: Rd game port base= 0x%X\n", nsm5010_watchdog_info.gamePort_base);
	if(nsm5010_watchdog_info.gamePort_base == 0) {
		watchdog_setValue(0x60, 0x02);   // high value
		watchdog_setValue(0x61, 0x01);	// low value
		nsm5010_watchdog_info.gamePort_base= 0x201;		
		//printk("nsm5010_watchdog: Reset game port base= 0x%X\n", nsm5010_watchdog_info.gamePort_base);

	}
    // Enable Game Port function
	watchdog_setValue(0x30, 0x01);
	
	// Multi-function pin register index=0x29
	set= watchdog_getValue(0x29);
	printk("watchdog: multi-function pins=%02X\n", set);


    // Exit the Configuration Mode for watchdog
    // bit-1
    watchdog_setValue(WDC_EXIT_MODE, 0x02);
	//printk("nsm5010_watchdog: init device exit\n");

	return 0;
}

static int watchdog_release(struct inode *inode, struct file * filp)
{
	disable_watchdog_counter();		// disable it when device closed
	printk("nsm5010_watchdog: device closed \n");
	clear_bit(0, &nsm5010_watchdog_info.opened);

	return 0;
}

static void show_serial_version(void)
{
	printk("nsm5010_watchdog: version %s (%s)\n",
	       watchdog_version, watchdog_revdate);
	return;
}

static struct file_operations nsm5010_watchdog_fops = {
	.owner = THIS_MODULE,
	.write = watchdog_write,
	.ioctl = watchdog_ioctl,
	.open	= watchdog_open,
	.release= watchdog_release,
};

static struct miscdevice nsm5010_watchdog_miscdev = {
	.minor = WATCHDOG_MINOR,
	.name = "watchdog",
	.fops = &nsm5010_watchdog_fops,
};


static int __init nsm5010_watchdog_init(void)
{
	int result;
   struct pci_dev *dev = NULL;
	u16 wval;

	show_serial_version();

	nsm5010_watchdog_info.opened = 0;
	nsm5010_watchdog_info.timeout_counter = 0x0100;

	printk("nsm5010_watchdog: module driver installed\n");
   while ((dev = pci_find_device(PCI_ANY_ID, PCI_ANY_ID, dev)) != NULL) {
	   if(dev->vendor == PCI_VENDOR_ID_INTEL) {
		   if(dev->device == PCI_DEVICE_ID_INTEL_ICH6_1) {
				pci_read_config_word(dev, 0x82, &wval);
				wval |= 0x0100;
				pci_write_config_word(dev, 0x82, wval);

			}
	    }
     }

	result = misc_register(&nsm5010_watchdog_miscdev);
	if (result < 0) {
		printk("nsm5010_watchdog: Couldn't register watchdog driver\n");
		return result;
	}

	return 0;
}

static void __exit nsm5010_watchdog_fini(void)
{
	int e1;
	
	e1 = misc_deregister(&nsm5010_watchdog_miscdev);

	if (e1 < 0) printk("nsm5010_watchdog: failed to unregister watchdog driver (%d)\n",  e1);
}

module_init(nsm5010_watchdog_init);
module_exit(nsm5010_watchdog_fini);
MODULE_DESCRIPTION("NSM5010 (ITE8712 Super IO) watchdog driver");
MODULE_LICENSE("GPL");
MODULE_ALIAS_MISCDEV(WATCHDOG_MINOR);
